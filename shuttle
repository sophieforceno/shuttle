#! /bin/bash

# SHuttle v1.1-(091122) 
# A Pushbullet CLI for the Bash shell
# by Sophie Forceno

# SHuttle is distributed under the MIT License
# See full license text at the bottom of this file
# Or visit: https://opensource.org/licenses/MIT

# See Changelog for the change log
# See README.md for installation and setup instructions

### Known issues:
# Empty cells of push list get filled in with next available cell. Cause is unknown.
# Bash interprets money amounts in USD as positional parameters ("$20" is pushed as "0")

shopt -s extglob
shopt -s nocasematch

# Start time of script to calculate runtime
# start=$(date +%s.%N)

# Version
ver="v1.0"
IFS=$'\n'

action="$1"
type="$2"
recip="$3"
title="$4"
body="$5"
file="$6"

api_url="https://api.pushbullet.com/v2"
client_id="bNPNXDYqWvRSEAH6iFlFUU3z8f7dVuoT"

# Testing for tput unknown terminal errors
term="xterm"

# Terminal width for printing pushes
term_width=$(tput cols)

## Parse stdin
parse_input () {
# Check if push body is on stdin	
# Some of this code was graciously borrowed from pushbullet-bash
# Thank you, Felix!
# See: https://github.com/Red5d/pushbullet-bash/blob/master/pushbullet#L386-L391
	if [ ! -t 0 ] && [[ "$type" = +(note|-n|link|l) ]]; then
		IFS=$'\n'
		# Pipe stdin via cat
		body=$(cat)
		body=($(printf "%s\n" "$body"))

		# Insert newlines after every line, otherwise push will fail
		for i in "${body[@]}"; do
			output+=$(printf "%s" "$i" | sed 's/$/\\n/')
		done
		body="${output[@]}"
	# Workaround to make weather pushes work
	elif [[ "$weather_flag" = 1 ]]; then
	#	echo that
		body=($(printf "%s\n" "$get_weather"))
		for i in "${body[@]}"; do
			output+=$(printf "%s" "$i" | sed 's/$/\\n/')
		done
		body="${output[@]}"
	fi
}

check_error () {
## Rate-limit checking
# See: https://docs.pushbullet.com/#ratelimiting
# Check if API returns an error
# Error 429 is error for reaching rate-limit (which is now 500 pushes per month for free accounts)
	error_code=$(echo "$api_request" | awk -F: '/code/ { print $3 }' | cut -d'"' -f2)
	error_type=$(echo "$api_request" | awk -F: '/type/ { print $4 }' | cut -d'"' -f2)
	error_msg=$(echo "$api_request" | awk -F: '/message/ { print $5 }' | cut -d'"' -f2)
	a_cat=$(echo "$api_request" | awk -F: '/cat/ { print $6 }' | cut -d'"' -f2)

	if [[ "$error_type" = +(invalid_request|server) ]]; then
		echo "SHuttle: Error: Server returned with "$error_code": "$error_msg" "$a_cat""
		exit 1
	fi
}

## Pagination
# See: https://docs.pushbullet.com/#pagination
paginate () {
cursor=$(echo $api_request | grep -iPo '(?=cursor).*' | cut -f2 -d':' | tr -d '"}')
}

### List available <device>
# See: https://docs.pushbullet.com/#devices
get_device_list () {
	api_request=$(curl -s -H "Access-Token: $access_token" $api_url/devices -X GET)
	check_error
	devs=$api_request
	paginate
# Check for additional pages of chats
	until [[ -z "$cursor" ]]; do
		api_request=$(curl -s -H "Access-Token: $access_token" $api_url/devices?cursor="$cursor" 2> /dev/null)
		check_error
		devs="$devs $api_request"
		paginate
	done

	api_request=$devs
	dev_names=$(echo $api_request | tr '{' '\n' | grep active\"\:true | tr ',' '\n' | grep -w nickname | cut -d'"' -f4)
	dev_idens=$(echo $api_request | tr '{' '\n' | grep active\"\:true | tr ',' '\n' | grep -w iden | cut -d'"' -f4)
# For auto-completion of device names
# Gets full device name from partial input
	recip_device=$(echo -e "$dev_names" | grep -iF "$recip") 

# If type = SMS then get the $dev_iden of $sms_device (via .shuttlerc)
# otherwise, get $dev_iden of $recip specified on command-line
	if [[ "$type" = "sms" ]]; then
		line_num=$(echo "$dev_names" | grep -in "$sms_device" | cut -d: -f1)
	else
		line_num=$(echo "$dev_names" | grep -in "$recip" | cut -d: -f1)
	fi
# Gets the right $dev_id from the list of all idens, $dev_idens, via $line_num
	dev_id=$(echo "$dev_idens" | sed -n $line_num'p' 2> /dev/null)   
  
# If $recip matches more than one <device> name, warn user
	if [[ "$action" = +(-p|push) ]] && ( [[ $(echo "$line_num" | wc -l) -gt 1 ]] || [[ $(echo "$recip_device" | wc -l) -gt 1 ]] ); then
		echo -e "\nMore than one <device> found:"
		echo -e "$recip_device"
		echo -e "\nPlease specify a unique partial or full match"
		exit 1
	fi
}

### List available <chats>
# See: https://docs.pushbullet.com/#list-chats
get_chats_list () {	
	api_request=$(curl -s -H "Access-Token: $access_token" $api_url/chats -X GET 2> /dev/null)
	check_error
	chats=$api_request
	paginate
# Check for additional pages of chats
	until [[ -z "$cursor" ]]; do
		api_request=$(curl -s -H "Access-Token: $access_token" $api_url/chats?cursor="$cursor" 2> /dev/null)
		check_error
		chats="$chats $api_request"
		paginate
	done

	api_request=$chats

	chat_emails=$(echo $api_request | tr ',' '\n' | grep -w -E '"active\"\:true"|email_normalized' | cut -d '"' -f4)
	chat_names=$(echo $api_request | tr ',' '\n '| grep -w "name" | sed -e 's/["}]//g' | cut -f2 -d':')
	line_num=$(echo "$chat_emails" | grep -in "$recip" | cut -d: -f1)
	chat_idens=$(echo $api_request | tr '{' '\n' | grep active\"\:true | tr ',' '\n' | grep -w iden | cut -d'"' -f4)
# Get chat_id from partial input of email address
	chat_id=$(echo "$chat_idens" | sed -n $line_num'p' 2> /dev/null)  
	# For auto-completion of recipient names
	# Gets full email address from partial input
	recip_email=$(echo "$chat_emails" | grep -iF "$recip") 		

	# Don't check <chat> if listing or adding chats
	if [[ "$type" != +(add|-a|chats|-c) ]]; then
		# If specified <chat> doesn't exist 
			if [[ -z "$line_num" ]]; then
				echo -e "\nError: Chat e-mail address not found. \nExecute "\"shuttle list chats"\" to see a list of available recipients."
				exit 1
			fi
		# Check that <chat> e-mail address is a unique target
			if [[ $(echo "$recip_email" | wc -l) -gt 1 ]]; then
					echo -e "\nMore than one chat found:"
					paste <(printf "%s\n" "$recip_email")
					echo -e "\nPlease specify a unique partial or full match"
					exit 1
			fi
	fi
# Output formatting variables for pushes list
	list_body=$(paste <(printf "%s\n" "$chat_names") <(printf "%s\n" "    ") <(printf "%s\n" "$chat_emails"))
}

### Get basic user info
# See: https://docs.pushbullet.com/#get-user
get_user_info () {
	api_request=$(curl -s -H "Access-Token: $access_token" $api_url/users/me -X GET)
	check_error
	user_iden=$(echo $api_request | awk -F: '/iden/ {print $3}' | cut -f1 -d',' | tr -d '"')
	user_name=$(echo $api_request | awk -F: '/name/ {print $8}' | cut -f1 -d',' | tr -d '"')
	user_email=$(echo $api_request | awk -F: '/name/ {print $7}' | cut -f1 -d',' | tr -d '"')
	avatar_url=$(echo $api_request | awk -F, '/image_url/ {print $8}' | cut -f4 -d'"')
}

### Get pushes since <time> t
# See: https://docs.pushbullet.com/#list-pushes
get_push_list () {
# Get user input and split into number and interval (h or d)
	interval=$(echo "$time" | tail -c 2)
	hour=$(echo "$time" | sed 's/[^0-9]//g')
# Convert input time in days to time in hours
	if [[ $interval =~ d ]];
		then
			hour=$((hour * 24))
	fi
	uts_hour=$((hour * 60 * 60))
	uts_now=$(date +%s)
	mod_time=$((uts_now - uts_hour))

	api_request=$(curl -s -H "Access-Token: $access_token" $api_url/pushes?modified_after=$mod_time -X GET)
	# Check for error messages in API response
	check_error
	pushes=$api_request
	paginate

# TODO: When getting > 1d, only gets what looks like a single page from n days ago 
# Check for additional pages of chats
	until [[ -z "$cursor" ]]; do
		api_request=$(curl -s -H "Access-Token: $access_token" $api_url/pushes?cursor="$cursor" 2> /dev/null)
		check_error
		pushes="$pushes $api_request"
		paginate
	done

	push_title=$(echo $api_request | tr ',' '\n '| grep -w "title" | cut -f2 -d',' | sed -e 's/["}]//g' -e 's/title://g')
	push_body=$(echo $api_request | tr ',' '\n '| grep -w "body" | cut -f2 -d',' | sed -e 's/["}]//g' -e 's/body://g')
	sender_name=$(echo $api_request | tr ',' '\n '| grep -w "sender_name" | cut -f2 -d':' | tr -d '"')
	sender_email=$(echo $api_request | tr ',' '\n '| grep -w "sender_email" | cut -f2 -d':' | tr -d '"')
	pushtypes=$(echo $api_request | tr ',' '\n '| grep -w "type" | cut -f2 -d':' | tr -d '"')
# Output formatting variables for pushes list
	col_width=$((term_width/5))
# Assemble the push data into rows and columns
# Crop the output to fit the terminal width
#list_header=$(paste <(printf "%s\n" "Title:") <(printf "%s\n" "Body:") <(printf "%s\n" "Sender Name:") <(printf "%s\n" "Sender Email:") <(printf "%s\n" "Type:") | pr -t -e$col_width)
#	list_seperator=$(printf %.s- {1..300} | cut -c1-$term_width)
#	list_body=$(paste <(printf "%s\n" "$push_title" | awk -v width="$(($col_width-4))" 'length > width{$0=substr($0,0,width)"..."}1') <(printf "%s\n" "$push_body" | awk -v width="$(($col_width-4))" 'length > width{$0=substr($0,0,width)"..."}1') <(printf "%s\n" "$sender_name") <(printf "%s\n" "$sender_email") <(printf "%s\n" "$pushtypes") | pr -t -e$col_width)

# TODO: Pretty sure I need to iterate over something to get it to display: push 1 title, push 1 body. push 1 sender. push 2 title, push 2 body...
IFS=$'\n'
echo -e "$push_title\n" "$push_body\n" | column -s $'\n' -t

######################################
#for value in "${values[@]}"; do 
#    printf "%-8s\n" "${value}"
#done | column
}
 
### Initial request to upload a file
# See: https://docs.pushbullet.com/#upload-request
# 1) Provide file name and type, request file_url from server
# 2) Upload file to upload_url obtained in response from step 1 
# 3) Send push with file name and location parameters (see "file" in case $2 statement below)
upload_file () {
	mime_type=$(file -i -b "$file")
# Step 1:
	upload_request=$(curl -s -H "Access-Token: $access_token" -H "Content-Type: application/json" $api_url/upload-request --data-binary "{\"file_name\":\"$file\",\"file_type\":\"$mime_type\"}" -X POST)
	file_url=$(echo $upload_request | grep "file_url" | awk -F, '{print $9}' | sed -e 's/^.*http/http/g' -e 's/"//g' -e 's/ /%20/g')
	get_upload_url=$(echo $upload_request | grep "upload_url" | awk -F'"' '{print $42}')
	content_type=$(echo $upload_request | grep "content-type" | awk -F: '{print $5}' | cut -f1 -d',' | tr -d '"')
# Step 2:
	curl -s -H "Access-Token: $access_token" $get_upload_url -F file="@$file" -X POST
}

# Main function that sends all pushes (except SMS)
# See: https://docs.pushbullet.com/#pushes
send_push () {	
	case "$recip" in
		all | All)
			api_request=$(curl -s -H "Access-Token: $access_token" -H "Content-Type: application/json" $api_url/pushes --data-binary '{"type":"'"$type"'","title":"'"$title"'","body":"'"$body"'"'"$push_param"'}' -X POST)
			check_error
		# Special output for weather conditions pushes
			if [[ $weather_flag = 1 ]]; then
				echo -e "Weather conditions for $town pushed to all devices\n"
			else
				echo -e "Push sent successfully to all devices\n"
			fi
			;;
		!(all) | !(All))																										
			api_request=$(curl -s -H "Access-Token: $access_token" -H "Content-Type: application/json" $api_url/pushes --data-binary '{"type":"'"$type"'","title":"'"$title"'","body":"'"$body"'",'"$push_param"''"$recip_param"'}' -X POST)
			check_error
			if [[ $weather_flag = 1 ]]; then
				echo -e "Weather conditions for $town pushed to $recip\n"
			else
				echo -e "Push sent successfully to $recip\n"	
			fi
			;;
	esac
}

### Usage text
usage () {
	cat <<- EOF
	SHuttle - $ver
	Usage: 	shuttle [action] [type] [recipient] [data]

[action]:
	chats | -c		Add, delete, or update chats
	devices | -d        	Add, delete, or update devices
	help | usage		Show the long usage text
	list | -l 		List channels, chats, devices, pushes, or user info
	push | -p		Send push to <device> or <chats>
	setup 			Acquire an access token (and generate .shuttlerc)

[type]:
For "push" [action]:
	file | -f		Push a file to <device> or <chat>
	link | -l		Push a link to <device> or <chat>
	note | -n		Push a note to <device> or <chat>
	sms  | -s		Send a text message to <phone number>
	weather | -w		Send local weather conditions to <device> or <chat>

For "chats" or "devices" [action]:
	add | -a		Add <chat> email address or <device> name
	delete | del		Delete <chat> email address or <device> name
	update | -u		Update <chat> email address or <device> name

For "list" [action]:
	channels		List channel subscriptions
	chats | -c		List available chats recipients
	devices | dev | -d	List available devices 	 
	pushes			List pushes from the last t intervals (h hours, d days - default is 24h)
	user 			List user info

-----
To push notes or files:   shuttle push note [recipient] [title] [body] ([file name])
To push links: 	          shuttle push link [recipient] [title] [body] <url>
	       Note: If no URL title is given, SHuttle will parse the website for a title
To push SMS: 		  shuttle push sms <phone number> [text]

Note: SHuttle accepts pipes from most commands. 
Examples:
* ps -eo pid,cmd,ppid,%mem,%cpu --sort=pcpu | tail -10 | shuttle -p -n browser "Top CPU usage by process"
* ls -alh /var/log | awk '{ print $5 "   " $9 }' | grep 'M\|G' | shuttle -p -n phone "Large log files"

Tips & Example usage:
--------------
To push a note to <device>:
* shuttle push note "Pixel 4a" "This is the note title" "This is the note body"

To push a link to <device>:
* shuttle push link "Browser" "Link title"  "<url>" 
Note: Omit body. You can also omit title, SHuttle will parse the site for it

Use shortcut flags for repetitive tasks or automated pushes:
* shuttle -p -f "Tablet" "System Logs" "For $(date +%m-%d-%y)" "/var/log/syslog"

Push a text message to <phone number>:
* shuttle push sms "+1 9995551234" "Remember to get milk"
(Your phone must be connected to the internet and set as "sms_device" in .shuttlerc)

Add, delete, or update <chat> email or <device> name:
* shuttle chats add "Moogie_the_Cat@cats.com"
Delete accepts partial matches of e-mail, if they are unique:
* shuttle chats del "moogie"

Update <recipient> email address or <device> name:
* shuttle chats update "Moogie_the_cat@cats.com" "Moogie@cats.com"
* shuttle devices -u "Galaxy S4" "Jane's Galaxy S4"

View recent pushes from the last t intervals (h hours, d days):
* shuttle list pushes 3d

Push weather condtions to <device>:
* shuttle -p -w "Tablet"
Note: You will be prompted for your zipcode. Only tested within the U.S.

<device> and <recipient> are case insensitive & can be a unique partial match, too:
* shuttle push link s4 "https://github.com/sophieforceno/shuttle"

For more examples and extension scripts, visit SHuttle on GitHub:
https://github.com/sophieforceno/shuttle
https://github.com/sophieforceno/shuttle-utils

EOF
}

### OAuth setup
# See: https://docs.pushbullet.com/#oauth 
setup () {
	# Generate .shuttlerc if it is missing
	touch ~/.shuttlerc

cat > ~/.shuttlerc << EOL
# Your access token, obtained by executing "shuttle setup"
# Or from your Pushbullet account settings:
# https://www.pushbullet.com/#settings/account
access_token=""

# Your Weather Underground API key
# Required for weather pushing functionality
# Obtain it by registering here: https://www.wunderground.com/weather/api/
wu_api_key=""

# Set your zipcode here for weather functionality 
zipcode=""

# Set the name of the device that will be sending SMS
# Most likely your mobile phone
# You can obtain the device name by executing "shuttle list devices"
sms_device=""

# Set the phone number associated with "sms_device" for SMS capabilities
# Number must be preceeded by +, country, and locality exchange codes (example for USA: +13335551234)
phone_number=""

# Default time interval to use when listing recent pushes 
time=24h

# Do not modify anything beyond this point
setup_flag=1
EOL
	oauth_url="https://www.pushbullet.com/authorize?client_id=$client_id&redirect_uri=https%3A%2F%2Fsophieforceno.github.io%2Fshuttle&response_type=token"	
	
	echo -e "\nFirst, you must authorize SHuttle with PushBullet" 
	echo "Press any key to open the authorization URL in your browser"
	echo "If your browser does not open, copy and paste the URL manually:"
	echo $oauth_url
echo -e "\nClick the Approve button in your browser to grant SHuttle access to your Pushbullet data."	
read -p ""
# This may not work on some distros
	xdg-open "https://www.pushbullet.com/authorize?client_id=$client_id&redirect_uri=$oauth_url" > /dev/null
	while [[ -z "$access_token" ]]; do
		read -p "Paste your access token here: " access_token
	done
	sed -i "s/access_token=.*/access_token=$access_token/g" ~/.shuttlerc
	echo -e "\nShuttle is now connected to Pushbullet!"
#	read -p "Would you like to use end-to-end encryption? (Available for SMS pushes only) (y/n)" -n 1 -r
#	if [[ "$REPLY" =~ ^[Yy]$ ]]; then
#		e2e_encrypt
#	fi
	echo -e "\nSetup is complete."
	echo -e "Execute "\"shuttle help"\" to see the full usage text"
	echo -e "Happy pushing!\n"
	exit 0
}

setup_greeter () {
	echo -e "Welcome to SHuttle - A Pushbullet CLI (for Bash)"
	echo -e "\nTo use SHuttle, you must provide your PushBullet access token."
	read -p "Do you want to run setup now to obtain your access token? (y/n): " -n 1 -r
	echo ""
		if [[ $REPLY =~ ^[Yy]$ ]]; then
			setup
			sed -i 's/setup_flag=.*/setup_flag=1/g' ~/.shuttlerc
			exit 0
		elif [[ $REPLY =~ ^[Nn]$ ]]; then
			echo -e "\nYou can run setup at any time by executing "\"shuttle setup"\"\n"
			exit 0
		fi
}

# Check if config file exists, and if setup has ever been run
if [[ -f "$HOME"/.shuttlerc ]]; then
	source ~/.shuttlerc
	if [[ "$setup_flag" = "0" || -z "$access_token" ]]; then
		setup_greeter
	fi
# If config file doesn't exist
else
	setup_greeter
fi

### <actions> ###
case "$1" in
	chats | -c )
			get_chats_list
			;;
	devices | -d )
			get_device_list
			;;
	help | --help | -h | usage)
			usage
			;;
	list | -l)
		# See types in case $2
			if [[ -z "$2" ]]; then
				echo "No list <type> defined. Try channels, chats, devices, or user."
			fi
			;;	
	push | -p)
		# If title and body are empty, warn and exit
		if [[ -z "$title" && -z "$body" && "$type" != +(weather|-w|link|-l) ]]; then
			echo "SHuttle: Error: No data. Check the title and body, and try again."
			exit 1
		fi
		# If $recip doesn't have an @, check device list (ignores device checking if pushing SMS or $recip = all)
			if [[ "$recip" != *@* ]] && [[ "$type" != +(sms|-s) ]] && [[ "$recip" != [Aa]ll ]]; then
				get_device_list			
			fi
		# If $recip doesn't match a string in device list, $recip must be a <chat>
			if [[ -z "$recip_device" ]] && [[ "$type" != +(sms|-s|clip|-c) ]] && [[ "$recip" != [Aa]ll ]]; then
				get_chats_list
			fi
		# Check that <device> or <chat> exists
		# This is ignored when pushing to All or when pushing SMS
			if [[ -z "$line_num" ]] && [[ "$recip" = "+*" ]] && [[ "$recip" != [Aa]ll ]]; then
				echo -e "SHuttle: Error: Unknown recipient. \nExecute "\"shuttle list devices"\" and "\"shuttle list chats"\" to see a list of available recipients \n"
				exit 1
			fi
		# Format API call depending on user input of <chat> email or <device> name
		# Chat emails
			if [[ -n "$recip_email" ]]; then
				recip="$recip_email"
				recip_param="\"email\":\"$recip_email\""
		# Device names
			elif [[ -n "$recip_device" ]]; then
				recip="$recip_device"
				recip_param="\"device_iden\":\"$dev_id\""
			fi
			;;
	setup)
			setup
			;;
		*)
			if [[ "$setup_flag" = "1" ]] && [[ "$1" != "setup" ]]; then
# INFO: If you change the usage text, adjust head argument value accordingly
				usage | head -n 42
				echo "-----"
				echo -e "Execute "\"shuttle help"\" for the full usage text & example usage\n"
			fi
			;; 
esac

### <types> ###
case "$2" in
	add | -a)
		# Check if <chat> is a duplicate
		if [[ -n "$recip_email" ]]; then
			echo -e "SHuttle: Error: A chat with this email address already exists\n"
			exit 1
		fi
		api_request=$(curl -s -H "Access-Token: $access_token" -H "Content-Type: application/json" $api_url/chats -X POST --data-binary '{"email":"'"$3"'"}')
		check_error
		echo -e "Chat added successfully\n"
		;;
	channel | channels)
		get_channels=$(curl -s -H "Access-Token: $access_token" $api_url/subscriptions -X GET)
		chan_names=$(echo $get_channels | tr ',' '\n '| grep -w "name" | cut -f2 -d':' | tr -d '"')
		chan_tags=$(echo $get_channels | tr ',' '\n '| grep -w "tag" | cut -f2 -d':' | tr -d '"')
		chan_desc=$(echo $get_channels | tr ',' '\n '| grep -w "description" | cut -f2 -d':' | tr -d '"' | tr -d '}')
		col_width=$((term_width/3))

		printf "%s\n" "Channel: 	 			Description: 		  	Tag:"
		printf "%s\n" "---------------------------------------------------------------------------------------"
		paste <(printf "%s\n" "$chan_names") <(printf "%s\n" "$chan_desc") <(printf "%s\n" "$chan_tags" "") | pr -t -e24
		;;
	chats | -c)
		get_chats_list
		echo -e "\nChats:"
		echo "--------"
		echo "$list_body" | sort -f
		;;
	devices | dev | -d)
		get_device_list
		echo -e "\nDevices:"
		echo "--------"
		echo -e "$dev_names\nAll" | sort -f
		;;
# For pro (paid) accounts only
# Untested since introduction of Pro tier accounts, ymmv
#	clip)
#			curl -s -H "Access-Token: $access_token" -H "Content-Type: application/json" --data-binary '{"type": "push", "push": {"type":"clip", "body":"'"$4"'", "source_device_iden":"'"$3"'", "source_user_iden":"'"$user_iden"'"}}' -X POST $api_url/ephemerals > /dev/null
#			echo -e "\nClip successfully pushed to clipboard of $recip_device \n"
#			;;
	del | delete) 
# Confirm delete
	read -p "Are you sure you want to delete "$recip_email"? (y/n) " -n 1 -r
	echo ""
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	# If <chat> exists and is a unique target, remove it
		if [[ $(echo "$line_num" | wc -w) = 1 ]]; then
			api_request=$(curl -s -H "Access-Token: $access_token" $api_url/chats/$chat_id -X DELETE)
			check_error
			echo -e "\nchat "$recip_email" successfully removed\n"

		fi
	elif [[ $REPLY =~ ^[Nn]$ ]]; then
		echo -e "Chat deletion cancelled."
		exit 0
	fi
			;;	
	file | -f)		
		# Check that <file> exists
			if [[ ! -e "$file" ]]; then
					echo -e "\nSHuttle: Error: File not found\n"
					exit 1
			fi
			type="file"
			upload_file	
	# Step 3 from upload_file(), the actual request is sent from send_push()
	# Modify JSON formatting depending on target 
		if [[ "$recip" = [Aa]ll ]]; then
			push_param=",\"file_type\":\"$content_type\",\"file_url\":\"$file_url\",\"file_name\":\"$file\""
		else
			push_param="\"file_type\":\"$content_type\",\"file_url\":\"$file_url\",\"file_name\":\"$file\","
		fi
	 	send_push															
			;;
	link | -l)
			type="link"
		# If no url title is given, then crudely attempt to extract title from the website
		# INFO: This doesn't always work properly, depending on the site. 
			if [[ $4 == *"http"* || $4 == *"www"* ]]; then
				link="$4"
				title=$(curl -s "$link" | grep -iPo '(?<=<title>)(.*)(?=</title>)')
			else
				link="$6"		
			fi
		# Modify JSON formatting depending on target 
			if [[ "$recip" = [Aa]ll ]]; then
				push_param=",\"url\":\"$link\""										
			else
				push_param="\"url\":\"$link\","
			fi
			parse_input
			send_push
			;;
# Notes are the "standard" push type, so we don't need much here
	note | -n)
			type="note"
			parse_input
			send_push
			;;
	pushes | -p)
			if [[ -n $3 ]];	then
				time=$3
			fi
			get_push_list	
		#	echo -e "\n$list_header"
		#	echo -e "$list_seperator"
		#	echo "$list_body"
			;;
	sms | -s)
		# Prompt user to configure SMS device
			if [[ -z "$sms_device" ]]; then
				echo "Enter name of SMS device enclosed in double quotes (execute "\"shuttle list devices"\" to see available devices):" 
				read -p "" sms_device
				sed -i "s/sms_device=.*/sms_device=$sms_device/g" ~/.shuttlerc
			fi
		# Prompt user to configure SMS device <phone number>
			if [[ -z "$phone_number" ]]; then
				echo "Enter the phone number of the SMS device (without dashes), beginning with + and your country code (example for USA: +18881234567):" 
				read -p "" phone_number
				sed -i "s/phone_number=.*/phone_number="$phone_number"/g" ~/.shuttlerc
			fi
		# Warn user if <phone number> is invalid
			if [[ ! "$recip" =~ [0-9]$ ]]; then
				echo -e "\nNot a valid <phone number>\n"
				exit 1
			fi
		# Warn user if <phone number> lacks leading +
			if [[ ! "$recip" =~ ^\+ ]]; then
				echo -e "\nRecipient's phone number must begin with a + symbol\n"
				exit 1
			fi
			type="sms"
			get_user_info
			get_device_list
		# Call to push SMS
			# If a file is provided, send it (sends jpeg only at the moment)
			if [[ -n "$5" ]]; then
				file="$5"
				# Upload file to Pushbullet prior to sending as MMS
				upload_file
				# TODO: Test if file has size > 0b and file is valid (e.g. exists at path)
				#### push_param=",\"file_type\":\"$content_type\",\"file_url\":\"$file_url\",\"file_name\":\"$file\""
				# TODO: Needs to be converted to /texts endpoint and tested, will not work as is. Still working on curl command that will work with the /texts endpoint
				api_request=$(curl -s -H "Access-Token: $access_token" -X POST $api_url/ephemerals --header "Content-Type: application/json" --data-binary '{"type": "push", "push": {"type": "messaging_extension_reply","package_name": "com.pushbullet.android","source_user_iden": "'"$user_iden"'", "target_device_iden": "'"$dev_id"'", "conversation_iden": "'"$3"'","message": "'"$4"'", "file_type":"image/jpeg" } }')
			# Otherwise just send text
			else
				api_request=$(curl -s -H "Access-Token: $access_token" -X POST $api_url/ephemerals --header "Content-Type: application/json" --data-binary '{"type": "push", "push": {"type": "messaging_extension_reply","package_name": "com.pushbullet.android","source_user_iden": "'"$user_iden"'", "target_device_iden": "'"$dev_id"'", "conversation_iden": "'"$3"'","message": "'"$4"'" } }')
				# Work in progress using new SMS api. Some issue with the data being sent, it doesn't like it
				#api_request=$(curl -s -H "Access-Token: $access_token" -X POST $api_url/texts --header "Content-Type: application/json" --data-binary '{"type": "push", "push": {"type": "messaging_extension_reply","package_name": "com.pushbullet.android", "target_device_iden": "'"$dev_id"'", "address: "'"$3"'","message": "'"$4"'" } }')
			fi
			check_error				
			echo -e "\nSMS sent successfully\n"	
			;;
	update | -u)	
		# Check that updated <chat> isn't a duplicate
			if [[ "$action" = +(chats|-c) ]]; then
				api_request=$(curl -s -H "Access-Token: $access_token" $api_url/chats -X POST -d email="$4" | grep "already")
				check_error
				if [[ -n $dupe_chat ]]; then
					echo -e "\nA chat with this email address already exists\n"
					exit 1
				fi
		# Delete old <chat> and re-add with new email 
				api_request=$(curl -s -H "Access-Token: $access_token" $api_url/chats/$chat_id -X DELETE > /dev/null)
				check_error
				api_request=$(curl -s -H "Access-Token: $access_token" -H "Content-Type: application/json" $api_url/chats -X POST --data-binary '{"email":"'"$4"'"}')
				check_error
				echo -e "\n Chat "$recip_email" successfully updated\n"
			elif [[ "$action" = +(devices|dev|-d) ]]; then
				curl -s -H "Access-Token: $access_token" $api_url/devices/$dev_id -d nickname="$4" -X POST > /dev/null
				echo -e "\n Device name successfully updated\n"
			fi
			;;
	user)
			get_user_info
			echo -e "Name: \t\t$user_name"
			echo -e "Email: \t\t$user_email" 
			echo -e "User ID: \t$user_iden" 
			echo -e "Avatar url: \t$avatar_url" 
			;;
	weather | -w)
			weather_flag=1
			if [[ -z $zipcode ]]; then
				read -p "Enter your zipcode: " zipcode 
				sed -i "s/zipcode=.*/zipcode=$zipcode/g" ~/.shuttlerc
			fi
			if [[ -z "$wu_api_key" ]]; then 
				echo -e "SHuttle: Error: No WeatherAPI API key!\n"
				echo "You need an API key to use this feature. Sign up for free here: https://www.wunderground.com/weather/api/"
				echo "And insert the value for wu_api_key in ~/.shuttlerc"
				exit 1
			fi
	# Check zipcode length
			zip_num=${#zipcode}				
			if [[ $zip_num -lt 5 ]]; then 
				echo -e "\n Error: Insufficient digits in zipcode \n" 
				exit 1
			fi			
			get_date=$(date '+%H:%M:%S on %b %d %Y')
			apires=$(curl -s "https://api.weatherapi.com/v1/current.json?key=$wu_api_key&q=$zipcode&aqi=no")		
			town=$(echo "$apires" | tr ',' '\n ' | grep -w name | cut -f3 -d':' | tr -d '"')
			temp_f=$(echo "$apires" | tr ',' '\n ' | grep -w temp_f | cut -f2 -d':' | tr -d '"')
			condition=$(echo "$apires" | tr ',' '\n ' | grep -w text | cut -f3 -d':' | tr -d '"')
			wind_mph=$(echo "$apires" | tr ',' '\n ' | grep -w wind_mph | cut -f2 -d':')
			humidity=$(echo "$apires" | tr ',' '\n ' | grep -w humidity | cut -f2 -d':')
			uvindex=$(echo "$apires" | tr ',' '\n ' | grep -w uv | cut -f2 -d':')
			get_weather=$(echo -n "$temp_f F - $condition\n$humidity% Humidity\n$wind_mph mph Wind\n$uvindex UV Index\nas of $get_date")
			type="note"
			push_param=""
			title="$(echo -n "Weather conditions for $town")"
			parse_input
			send_push
			;;
esac

shopt -u nocasematch

#end=$(date +%s.%N)
#runtime=$(echo "$end - $start" | bc -l)
#echo -e "\nRuntime: $runtime"

exit 0

# The MIT License (MIT)
# Copyright (c) 2022 Sophie Forceno
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
# to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
# and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
